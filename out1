LIBFT	=	libft/libft.a
SRCS	=	$(addprefix srcs/, main.c history.c signal_handler.c)
PROMPT 	=	$(addprefix srcs/parsing/, handle_dollars.c handle_dollars_utils.c is_pipe.c parsing.c check_builtins.c redirection.c\
							in_out_redirect.c get_in_fd.c heredoc.c parse_heredoc.c get_out_fd.c fd_init.c add_space.c is_valid_cmd.c\
							make_redirect.c handle_pipe.c)
BUILTINS	=	$(addprefix srcs/builtins/, ft_echo.c ft_exit.c ft_cd.c ft_pwd.c ft_export.c ft_export2.c ft_export_sort_display.c \
UTILS	=	$(addprefix srcs/utils/, split_pipe.c split_pipe2.c split_wquote.c utils.c quote.c cmd_utils.c)
EXEC	=	$(addprefix srcs/execution/, extern.c exec_pipe.c exec_nopipe.c last_step.c)
#prevoir plusieurs dossier dans srcs
CFLAGS	=	-Werror -Wextra -Wall -g
# Colors and style
all:	${NAME} display_ascii
	@${CC} ${CFLAGS} ${OBJS} ${OBJSB} ${OBJSP} ${OBJSU} ${OBJSEX} ${LIBFT} -lreadline -o ${NAME}
	@echo "${BOLD}${GREEN}‚úì LIBFT ready${END}"
	@$(eval CURRENT_FILE=$(shell echo $$(($(CURRENT_FILE)+1))))
	@mkdir -p ${OBJDIR}/srcs/parsing
	@echo "${BOLD}${BLUE}üìÅ Created objects directory${END}"
leaks: ${NAME}
	@echo "${GREEN}Valgrind launched, outfiles :${YELLOW} leakslogs.txt${END}"
	@valgrind --leak-check=full --log-file=leakslogs.txt --show-leak-kinds=all --trace-children=yes --track-fds=yes --suppressions=ignore_readline_leaks.supp ./minishell
clean:
	@echo "${BOLD}${YELLOW}üßπ Cleaning objects...${END}"
	@${MAKE} -C ./libft/ clean
	@echo "${BOLD}${GREEN}‚úì Clean complete${END}"
fclean: clean
	@echo "${BOLD}${YELLOW}üóëÔ∏è  Deep cleaning...${END}"
	@${MAKE} -C ./libft/ fclean
	@echo "${BOLD}${GREEN}‚ú® All clean ‚ú®${END}"
re: fclean all
party:
	@echo "$(BOLD)Let's party!"
	@echo "$(BOLD) Party time is over! Back to work! \n (^-^)7$(END)"
cat:
.PHONY: all clean fclean re display_ascii
display_ascii:
	@if [ -f ascii_art.txt ]; then \
		cat ascii_art.txt; \
	@echo "${BOLD}${L_PURPLE} ‚ú®minishell‚ú® ${GREEN}is ready üéâ ${END}"
	@echo "${BOLD}${BLUE}‚ûú Use ./${NAME} to run the program${END}"
